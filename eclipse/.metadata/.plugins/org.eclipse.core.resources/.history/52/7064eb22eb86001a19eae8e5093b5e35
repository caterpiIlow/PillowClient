package AetherClient.gui;

import java.awt.Color;

import org.lwjgl.opengl.GL11;

import caterpillow.utils.UnicodeFontRenderer;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.Gui;
import net.minecraft.client.gui.ScaledResolution;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.client.renderer.texture.TextureManager;
import net.minecraft.client.shader.Framebuffer;
import net.minecraft.util.ResourceLocation;

public class SplashProgress {

	protected static Minecraft mc = Minecraft.getMinecraft();
	private static final int MAX = 8;
	private static int progress = 0;
	private static String CURRENT = "";
	private static ResourceLocation splash;
	private static UnicodeFontRenderer ufr;

	public static void update() {
		if (mc == null || mc.getLanguageManager() == null) {
			return;
		}
		drawSplash(mc.getTextureManager());
	}

	public static void setProgress(int givenProgress, String givenText) {

		progress = givenProgress;
		CURRENT = givenText;
		update();

	}

	public static void drawSplash(TextureManager tm) {

		ScaledResolution sr = new ScaledResolution(mc);
		int scaleFactor = sr.getScaleFactor();

		Framebuffer framebuffer = new Framebuffer(sr.getScaledWidth() * scaleFactor,
				sr.getScaledHeight() * sr.getScaleFactor(), true);
		framebuffer.bindFramebuffer(false);

		GlStateManager.matrixMode(GL11.GL_PROJECTION);
		GlStateManager.loadIdentity();
		GlStateManager.ortho(0.0D, sr.getScaledWidth_double(), sr.getScaledHeight_double(), 0.0D, 1000.0D, 3000.0D);
		GlStateManager.matrixMode(GL11.GL_MODELVIEW);
		GlStateManager.loadIdentity();
		GlStateManager.translate(0, 0, -2000);
		GlStateManager.disableLighting();
		GlStateManager.disableDepth();
		GlStateManager.disableFog();
		GlStateManager.disableDepth();
		GlStateManager.enableTexture2D();

		if (splash == null) {
			splash = new ResourceLocation("aetherclient/splash.png");
		}

		tm.bindTexture(splash);

		GlStateManager.resetColor();
		GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);

		Gui.drawScaledCustomSizeModalRect(0, 0, 0, 0, 1920, 1080, sr.getScaledWidth(), sr.getScaledHeight(), 1920,
				1080);
		drawProgress();
		framebuffer.unbindFramebuffer();
		framebuffer.framebufferRender(sr.getScaledWidth() * sr.getScaleFactor(),
				sr.getScaledHeight() * sr.getScaleFactor());

		GlStateManager.enableAlpha();
		GlStateManager.alphaFunc(516, 0.1F);

		mc.updateDisplay();

	}

	private static void drawProgress() {

		ScaledResolution sr = new ScaledResolution(mc);

		if (mc.gameSettings == null || mc.getTextureManager() == null) {
			return;
		}
		if (ufr == null) {
			ufr = UnicodeFontRenderer.getFontOnPC("Arial", 20);
		}

		double nProgress = (double) progress;
		double calc = (nProgress / MAX) * sr.getScaledWidth();

		Gui.drawRect(0, sr.getScaledHeight() - 35, sr.getScaledWidth(), sr.getScaledHeight(),
				new Color(0, 0, 0, 50).getRGB());

		GlStateManager.resetColor();
		resetTextures();

		ufr.drawString(CURRENT, 20, sr.getScaledHeight() - 25, 0xFFFFFFFF);

		String step = progress + "/" + MAX;

		ufr.drawString(step, sr.getScaledWidth() - 20 - ufr.getStringWidth(step), sr.getScaledHeight() - 25,
				0xE1E1E1FF);

		GlStateManager.resetColor();
		resetTextures();

		Gui.drawRect(0, sr.getScaledHeight() - 2, (int) calc, sr.getScaledHeight(), new Color(149, 201, 144).getRGB());

		Gui.drawRect(0, sr.getScaledHeight() - 2, sr.getScaledWidth(), sr.getScaledHeight(),
				new Color(0, 0, 0, 10).getRGB());

	}

	private static void resetTextures() {

		GlStateManager.textureState[GlStateManager.activeTextureUnit].textureName = -1;

	}

}
