package caterpillow.Notification;

import java.util.ArrayList;
import java.util.concurrent.CopyOnWriteArrayList;

public class NotificationManager {
	private static CopyOnWriteArrayList<Notification> pendingNotifications = new CopyOnWriteArrayList<Notification>();
	private static Notification currentNotification = null;

	public static void show(NotificationType type, String name, String text, int length) {
		Notification newNotification = new Notification(type, name, text, length);
		System.out.println("Added notification to queue");
		pendingNotifications.add(newNotification);
		System.out.println("Shwoing notification");
		newNotification.show();
	}

//	public static void update() {
//		if (currentNotification != null && !currentNotification.isShown()) {
//			System.out.println("current notification not shown; setting current notification to null");
//
//			currentNotification = null;
//		}
//
//		if (currentNotification == null && !pendingNotifications.isEmpty()) {
//			currentNotification = pendingNotifications.get(0);
//			currentNotification = pendingNotifications.remove(0);
//
//			currentNotification.show();
//			System.out.println("Shwoing notification");
//
//		}
//
//	}

	public void removeFromList(int index) {
		pendingNotifications.remove(index);
	}

	public void removeFromList(Notification object) {
		pendingNotifications.remove(object);
	}

	public int getIndex(Notification notification) {
		return pendingNotifications.indexOf(notification);
	}

	public Notification getObject(int index) {
		return pendingNotifications.get(index);
	}

	public static void notificationUpdate() {
		CopyOnWriteArrayList<Notification> notificationList = pendingNotifications;
		for (Notification notification : notificationList) {
			notification.render();
		}
	}

}